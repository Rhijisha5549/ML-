# -*- coding: utf-8 -*-
"""Prediction using Supervised ML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lu69ScuFK5B3dah0522zXRC69uDBQ7aQ

# Name : Rhijisha Dutta

# The Spark Foundation GRIPJuly21

# Data Science and Business Analytics Intern at The Spark Foundation

# Task1 : Prediction using Supervised ML

## Linear Regression
Here I have implemented simple Linear Regression involving two variables.I have imported all the libraries required in this notebook.

## Simple Linear Regression
Here we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.

# Author: Rhijisha Dutta
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all moddules required in this notebook
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

##Importing the Dataframe and storing it in variable df
df = pd.read_csv('Percentage.csv')
print("Data imported successfully")

#Using the head() method to display 10 rows from starting of the Dataframe
df.head(10)

"""# Here we will plot our data points on 2-D graph to visualize our dataset and see if we can manually find any relationship between the data.We will create the plot with the following script"""

# Plotting the distribution of scores
plt.scatter(x=df.Hours,y=df.Scores,s=30,color='red')
plt.title('Hours vs Percentage')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.grid()

"""# Here we can see that there is a positive linear relation between the number of hours studied and percentage of score

# Prepairing the data

 I have divided the data into attributes(inputs)and labels(outputs).
"""

X = df.iloc[:, :-1].values  
y = df.iloc[:, 1].values

"""## Now that we have our attributes and labels, the next step is to split this data into training and test sets. I have done this by using Scikit-Learn's built-in train_test_split() method:"""

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""# Training the Algorithm
We have split our data into training and testing sets, and now is finally the time to train our algorithm.
"""

from sklearn.linear_model import LinearRegression  
reg = LinearRegression()  
reg.fit(X_train, y_train) 

print("Model Training done")

# Plotting the regression line
plt.scatter(x=df.Hours,y=df.Scores,s=30,color='red')
plt.plot(df.Hours,reg.predict(df[['Hours']]),color='blue')
plt.title('Hours vs Percentage')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.grid()

print(X_test) # Testing data - In Hours
y_pred = reg.predict(X_test) # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

# You can also test with your own data
hours = [[9.25]]
own_pred = reg.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

"""# Evaluating the model
Here we have evaluated the performance of our algorithm.
"""

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))